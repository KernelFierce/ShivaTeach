/**
  * @description This ruleset enforces a strict user-ownership model for user profiles and tenant-based access control for other data.
  * @data-structure
  *   - /users/{userId}: Stores private user profiles. Only the user can read/write their own profile.
  *   - /tenants/{tenantId}: Stores tenant information.
  *   - /tenants/{tenantId}/users/{userId}: Stores user profiles within a tenant.
  *   - /tenants/{tenantId}/courses/{courseId}: Stores course information for a tenant.
  *   - /tenants/{tenantId}/subjects/{subjectId}: Stores subject information for a tenant.
  *   - /tenants/{tenantId}/sessions/{sessionId}: Stores session information for a tenant.
  *   - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice information for a tenant.
  *   - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment information for a specific invoice.
  *   - /tenants/{tenantId}/availabilities/{availabilityId}: Stores teacher availability for a tenant.
  *   - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment information for a tenant.
  *   - /tenants/{tenantId}/leads/{leadId}: Stores lead information for a tenant.
  * @key-security-decisions
  *   - User profiles are strictly private and only accessible to the owning user.
  *   - All data under a tenant requires the user to be authenticated.
  *   - Data validation is minimized to focus on authorization and relational integrity.
  * @denormalization-for-authorization
  *   - All tenant-related data includes the tenantId field to avoid costly `get()` calls in security rules.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

  /**
   * @description Grants access only to the owner of the user profile.
   * @path /users/{userId}
   * @allow (get, create, update, delete) if the authenticated user's UID matches the userId.
   * @deny (get, create, update, delete) if the authenticated user's UID does not match the userId.
   * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
   */
  match /users/{userId} {
  function isOwner(userId) {
  return request.auth != null && request.auth.uid == userId;
  }
  function isExistingOwner(userId) {
  return isOwner(userId) && resource != null;
  }
  allow get: if isOwner(userId);
  allow list: if false;
  allow create: if isOwner(userId);
  allow update: if isExistingOwner(userId);
  allow delete: if isExistingOwner(userId);
  }
 

  /**
   * @description Allows access to tenant information.  Further access control would typically be added here.
   * @path /tenants/{tenantId}
   * @allow (get, list) if true (for public access).
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant user information.  Further access control would typically be added here.
   * @path /tenants/{tenantId}/users/{userId}
   *   @allow (get, list) if true.
   *   @allow (create) if false. // TODO: Add role validation or other logic.
   *   @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/users/{userId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant course information. Further access control would typically be added here.
   * @path /tenants/{tenantId}/courses/{courseId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/courses/{courseId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant subject information. Further access control would typically be added here.
   * @path /tenants/{tenantId}/subjects/{subjectId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/subjects/{subjectId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant session information.  Further access control would typically be added here.
   * @path /tenants/{tenantId}/sessions/{sessionId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/sessions/{sessionId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant invoice information.  Further access control would typically be added here.
   * @path /tenants/{tenantId}/invoices/{invoiceId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/invoices/{invoiceId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant payment information. Further access control would typically be added here.
   * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant availability information. Further access control would typically be added here.
   * @path /tenants/{tenantId}/availabilities/{availabilityId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/availabilities/{availabilityId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant assignment information.  Further access control would typically be added here.
   * @path /tenants/{tenantId}/assignments/{assignmentId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/assignments/{assignmentId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
 

  /**
   * @description Allows access to tenant lead information. Further access control would typically be added here.
   * @path /tenants/{tenantId}/leads/{leadId}
   * @allow (get, list) if true.
   * @allow (create) if false; // TODO: Add role validation or other logic.
   * @allow (update, delete) if false; // TODO: Add role validation or other logic and resource != null.
   * @principle Placeholder for future tenant-level access control.
   */
  match /tenants/{tenantId}/leads/{leadId} {
  allow get, list: if true;
  allow create: if false; // TODO: Add role validation or other logic.
  allow update: if false; // TODO: Add role validation or other logic and resource != null.
  allow delete: if false; // TODO: Add role validation or other logic and resource != null.
  }
  }
 }