/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for private user data and a tenant-based access control model for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the user themselves.
 * - /tenants/{tenantId}: Stores tenant-level data, potentially accessible to tenant admins.
 * - /tenants/{tenantId}/users/{userId}: Stores user data within a tenant context.
 * - /tenants/{tenantId}/courses/{courseId}: Stores course data for a specific tenant.
 * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject data for a specific tenant.
 * - /tenants/{tenantId}/sessions/{sessionId}: Stores session data for a specific tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice data for a specific tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment data for a specific invoice.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores teacher availability data.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment data for courses.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead data for potential students.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Tenant-related data requires tenant membership for access. The specific role required is not defined in this prototype and should be implemented according to business needs.
 * - The rules avoid using `get()` calls to other documents for authorization by requiring that all relevant data (e.g., `tenantId`, `ownerId`) is present within the document being secured.
 * - The rules are designed to support secure `list` operations by scoping collections to tenants and users.
 *
 * Denormalization for Authorization:
 * - All tenant-related documents (e.g., courses, subjects, sessions) MUST include the `tenantId` field to allow for tenant-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant documents. Requires authentication and a tenant admin role (TODO).
     * @path /tenants/{tenantId}
     * @allow (get, list) Public read access.
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Public read with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to user documents within a specific tenant. Requires authentication and a tenant admin role (TODO).
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped user management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/users/{userId} {
      allow get, list: if true;
      allow create: if isSignedIn(); // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to course documents within a tenant. Requires authentication and a tenant admin role (TODO).
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped course management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to subject documents within a tenant. Requires authentication and a tenant admin role (TODO).
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped subject management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to session documents within a tenant. Requires authentication and tenant admin/teacher role (TODO).
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin/teacher role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped session management with tenant admin/teacher restricted writes (TODO).
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
    }

    /**
     * @description Controls access to invoice documents within a tenant. Requires authentication and tenant admin role (TODO).
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped invoice management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to payment documents within a specific invoice. Requires authentication and tenant admin role (TODO).
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped payment management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
    }

    /**
     * @description Controls access to availability documents within a tenant. Requires authentication and tenant admin/teacher role (TODO).
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin/teacher role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped availability management with tenant admin/teacher restricted writes (TODO).
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
    }

    /**
     * @description Controls access to assignment documents within a tenant. Requires authentication and tenant admin/teacher role (TODO).
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin/teacher role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped assignment management with tenant admin/teacher restricted writes (TODO).
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin/teacher role check.
    }

    /**
     * @description Controls access to lead documents within a tenant. Requires authentication and tenant admin role (TODO).
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) Public read access (for tenant members).
     * @allow (create, update, delete) if request.auth != null // TODO: Add tenant admin role check
     * @deny (create, update, delete) if request.auth == null
     * @principle Tenant-scoped lead management with tenant admin restricted writes (TODO).
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId; // TODO: Add tenant admin role check and data validation.
      allow update: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
      allow delete: if isSignedIn() && resource != null && resource.data.tenantId == tenantId; // TODO: Add tenant admin role check.
    }
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  // Helper function to determine if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

    // Helper function to check if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }
}