/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant data model with user-based access control.
 * All data is scoped to a specific tenant, and users are granted access based on their role within that tenant.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data, accessible only to the user themselves.
 * - /tenants/{tenantId}: Stores tenant-level information.  No specific access controls are defined here, assuming tenant management happens via backend.
 * - /tenants/{tenantId}/users/{userId}: Stores tenant-specific user data, accessible to tenant admins.
 * - /tenants/{tenantId}/{collections}/{docId}: Other tenant-scoped collections (courses, subjects, sessions, etc.) are accessible to tenant admins.
 *
 * Key Security Decisions:
 * - Strict user-ownership model for /users/{userId} (only the user can read/write their own profile).
 * - Tenant-based access control for all data under /tenants/{tenantId}.  Tenant admins have broad access within their tenant.
 * - No user listing is allowed at the root level (to protect user privacy).
 * - Data validation is minimal in this prototype. The rules primarily focus on authorization, not data integrity.
 * - The rules are designed to prevent common security mistakes, such as allowing unauthorized data modification or deletion.
 *
 * Denormalization for Authorization:
 * - All tenant-scoped documents include a `tenantId` field, enabling rules to quickly verify tenant membership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects private user profile data. Only the user can access their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (list) User listing is not allowed.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant documents. Assuming tenant management happens via backend and is not directly client facing.
     * @path /tenants/{tenantId}
     * @allow (get, list) if true; // TODO: Evaluate if tenants should be publicly listable.
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle This rule provides a secure placeholder for tenant access while data access requirements are finalized.
     */
    match /tenants/{tenantId} {
      allow get, list: if true; // Assuming public read for tenants
      allow create, update, delete: if false; // TODO: Define Tenant Role for authorization.
    }

    /**
     * @description Controls access to user documents within a tenant. Currently allows any authenticated user to read,
     *              but restricts creation, updates, and deletions.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Define Tenant Role for authorization.
     * @principle Tenant-based access control for user data.
     */
    match /tenants/{tenantId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to course documents within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for course data.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to subject documents within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for subject data.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to session documents within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for session data.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to invoice documents within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for invoice data.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to payment documents within a tenant and invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for payment data.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to availability documents within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for availability data.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to assignment documents within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for assignment data.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

    /**
     * @description Controls access to lead documents within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) if isSignedIn();
     * @allow (create, update, delete) if false; // TODO: Add Tenant Role for authorization.
     * @principle Tenant-based access control for lead data.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add Tenant Role for authorization.
    }

     /**
      * @description  Denies all list operations under /tenants/{tenantId}/users to prevent unauthorized listing of users.  This rule overrides the inherited `list` permission from the parent `/tenants/{tenantId}` path.
      * @path /tenants/{tenantId}/users
      * @allow (list) if false
      * @deny (get,create,update,delete) always
      * @principle Overrides general tenant access for user lists to restrict access.
      */
    match /tenants/{tenantId}/users {
        allow list: if false;
    }
  }
}