/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hierarchical security model for a tutoring application,
 *              segregating user data and tenant-owned data to ensure authorization independence and scalability.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data under `/users/{userId}`.
 * Tenant-specific data is secured under `/tenants/{tenantId}`, with authorization checks based on user roles within the tenant.
 * SuperAdmin access is granted through membership in the `/roles_admin/{uid}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Private user profiles, accessible only to the authenticated user.
 * - /tenants/{tenantId}: Tenant details, accessible to organization admins and potentially other roles.
 * - /tenants/{tenantId}/users/{userId}: User profiles within a specific tenant.
 * - /tenants/{tenantId}/courses/{courseId}: Courses offered by a tenant.
 * - /tenants/{tenantId}/subjects/{subjectId}: Subjects offered by a tenant.
 * - /tenants/{tenantId}/sessions/{sessionId}: Tutoring sessions scheduled within a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Invoices generated by a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Payments made towards an invoice.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Teacher availability within a tenant.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Assignments given to students within a tenant.
 * - /tenants/{tenantId}/leads/{leadId}: Leads for potential students within a tenant.
 *
 * Key Security Decisions:
 * - Strict ownership enforced for `/users/{userId}`.
 * - Tenant-level access control for all tenant-owned data based on user role within the tenant.
 * - No public listing of user data.
 * - Data validation is limited to authorization-critical fields in `create` and `update` operations.
 *
 * Denormalization for Authorization:
 * - All tenant-owned documents include a `tenantId` field to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own private profile data.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read access to tenant information. Write access should be restricted to organization admins.
     * @path /tenants/{tenantId}
     * @allow (read) to anyone
     * @allow (write) to organization admins
     * @deny (write) to non-organization admins
     * @principle Tenant data should be readable, but writes must be controlled.
     */
    match /tenants/{tenantId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Tenant creation logic and role verification
        allow update: if false; // TODO: Implement Tenant update logic and role verification
        allow delete: if false; // TODO: Implement Tenant delete logic and role verification
    }

    /**
     * @description Allows read and write access to user profiles within a specific tenant.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant users managed within tenant context.
     */
    match /tenants/{tenantId}/users/{userId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Tenant User creation logic and role verification
        allow update: if false; // TODO: Implement Tenant User update logic and role verification
        allow delete: if false; // TODO: Implement Tenant User delete logic and role verification
    }

    /**
     * @description Allows read and write access to course information within a specific tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant courses managed within tenant context.
     */
    match /tenants/{tenantId}/courses/{courseId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Course creation logic and role verification
        allow update: if false; // TODO: Implement Course update logic and role verification
        allow delete: if false; // TODO: Implement Course delete logic and role verification
    }

    /**
     * @description Allows read and write access to subject information within a specific tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant subjects managed within tenant context.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Subject creation logic and role verification
        allow update: if false; // TODO: Implement Subject update logic and role verification
        allow delete: if false; // TODO: Implement Subject delete logic and role verification
    }

    /**
     * @description Allows read and write access to session information within a specific tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant sessions managed within tenant context.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Session creation logic and role verification
        allow update: if false; // TODO: Implement Session update logic and role verification
        allow delete: if false; // TODO: Implement Session delete logic and role verification
    }

    /**
     * @description Allows read and write access to invoice information within a specific tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant invoices managed within tenant context.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Invoice creation logic and role verification
        allow update: if false; // TODO: Implement Invoice update logic and role verification
        allow delete: if false; // TODO: Implement Invoice delete logic and role verification
    }

    /**
     * @description Allows read and write access to payment information within a specific invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant payments managed within tenant context.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Payment creation logic and role verification
        allow update: if false; // TODO: Implement Payment update logic and role verification
        allow delete: if false; // TODO: Implement Payment delete logic and role verification
    }

    /**
     * @description Allows read and write access to teacher availability within a specific tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant availabilities managed within tenant context.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Availability creation logic and role verification
        allow update: if false; // TODO: Implement Availability update logic and role verification
        allow delete: if false; // TODO: Implement Availability delete logic and role verification
    }

    /**
     * @description Allows read and write access to assignment information within a specific tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant assignments managed within tenant context.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Assignment creation logic and role verification
        allow update: if false; // TODO: Implement Assignment update logic and role verification
        allow delete: if false; // TODO: Implement Assignment delete logic and role verification
    }

    /**
     * @description Allows read and write access to lead information within a specific tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (read, write) if user is a member of the tenant with appropriate roles
     * @deny (read, write) if user is not a member of the tenant
     * @principle Tenant leads managed within tenant context.
     */
    match /tenants/{tenantId}/leads/{leadId} {
        allow get, list: if true;
        allow create: if false; // TODO: Implement Lead creation logic and role verification
        allow update: if false; // TODO: Implement Lead update logic and role verification
        allow delete: if false; // TODO: Implement Lead delete logic and role verification
    }
  }
}