/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a strict, ownership-based security model for user profiles
 * and a tenant-based access control for other collections.
 *
 * @data-structure
 * - /users/{userId}: Stores private user profile data, accessible only by the user.
 * - /tenants/{tenantId}: Stores tenant information, with tenant-specific subcollections.
 * - /tenants/{tenantId}/users/{userId}: Stores public user profiles within a tenant.
 * - /tenants/{tenantId}/courses/{courseId}: Stores course information for a tenant.
 * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject information for a tenant.
 * - /tenants/{tenantId}/sessions/{sessionId}: Stores session information for a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice information for a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment information for an invoice.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores teacher availability for a tenant.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment information for a tenant.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead information for a tenant.
 *
 * @key-security-decisions
 * - User profiles are strictly private and only accessible by the owning user.
 * - Tenant data access is not restricted in this prototype.
 * - Data consistency between the path and document data is enforced on create and update.
 *
 * @denormalization-for-authorization
 * - Tenant-owned documents include the `tenantId` field to allow direct rule-based access without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's ID matches the {userId}.
     *   Example (create): request.auth.uid == "user123" creates a document at /users/user123.
     *   Example (update): request.auth.uid == "user123" updates the document at /users/user123.
     * @deny (get, create, update, delete) if the authenticated user's ID does not match the {userId}.
     *   Example (create): request.auth.uid == "user456" attempts to create a document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to tenant users.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/users/{userId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to courses within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to subjects within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to sessions within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to invoices within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to payments within a tenant's invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to availabilities within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to assignments within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }

    /**
     * @description Controls access to leads within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false; // TODO: Add tenant admin check
     * @principle No authorization enforced on tenants yet.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add tenant admin check
    }
  }
}