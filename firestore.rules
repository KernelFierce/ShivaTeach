rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile if request.auth.uid == 'user123'.
     * @deny (create) - User with ID 'user456' cannot create profile for 'user123'.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their own profile.
     * @deny (get, update, delete) - User with ID 'user456' cannot get, update, or delete profile for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read tenant data, but requires authentication to modify it.
     * @path /tenants/{tenantId}
     * @allow (get, list) - Any user (signed in or not) can read tenant data.
     * @allow (create) - Signed in user can create a tenant.
     * @deny (create) - Non-signed in user can't create a tenant.
     * @allow (update, delete) - Signed in user can update or delete a tenant.
     * @deny (update, delete) - Non-signed in user can't update or delete a tenant.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read tenant user data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list) - Any user (signed in or not) can read tenant user data.
     * @allow (create) - Signed in user can create a tenant user.
     * @deny (create) - Non-signed in user can't create a tenant user.
     * @allow (update, delete) - Signed in user can update or delete a tenant user.
     * @deny (update, delete) - Non-signed in user can't update or delete a tenant user.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/users/{userId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && exists(resource);
        allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read course data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) - Any user (signed in or not) can read course data.
     * @allow (create) - Signed in user can create a course.
     * @deny (create) - Non-signed in user can't create a course.
     * @allow (update, delete) - Signed in user can update or delete a course.
     * @deny (update, delete) - Non-signed in user can't update or delete a course.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read subject data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) - Any user (signed in or not) can read subject data.
     * @allow (create) - Signed in user can create a subject.
     * @deny (create) - Non-signed in user can't create a subject.
     * @allow (update, delete) - Signed in user can update or delete a subject.
     * @deny (update, delete) - Non-signed in user can't update or delete a subject.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read session data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) - Any user (signed in or not) can read session data.
     * @allow (create) - Signed in user can create a session.
     * @deny (create) - Non-signed in user can't create a session.
     * @allow (update, delete) - Signed in user can update or delete a session.
     * @deny (update, delete) - Non-signed in user can't update or delete a session.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read invoice data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) - Any user (signed in or not) can read invoice data.
     * @allow (create) - Signed in user can create an invoice.
     * @deny (create) - Non-signed in user can't create an invoice.
     * @allow (update, delete) - Signed in user can update or delete an invoice.
     * @deny (update, delete) - Non-signed in user can't update or delete an invoice.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read payment data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) - Any user (signed in or not) can read payment data.
     * @allow (create) - Signed in user can create a payment.
     * @deny (create) - Non-signed in user can't create a payment.
     * @allow (update, delete) - Signed in user can update or delete a payment.
     * @deny (update, delete) - Non-signed in user can't update or delete a payment.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read availability data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) - Any user (signed in or not) can read availability data.
     * @allow (create) - Signed in user can create an availability.
     * @deny (create) - Non-signed in user can't create an availability.
     * @allow (update, delete) - Signed in user can update or delete an availability.
     * @deny (update, delete) - Non-signed in user can't update or delete an availability.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read assignment data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) - Any user (signed in or not) can read assignment data.
     * @allow (create) - Signed in user can create an assignment.
     * @deny (create) - Non-signed in user can't create an assignment.
     * @allow (update, delete) - Signed in user can update or delete an assignment.
     * @deny (update, delete) - Non-signed in user can't update or delete an assignment.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }

    /**
     * @description Allows anyone to read lead data, but requires authentication to modify it.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) - Any user (signed in or not) can read lead data.
     * @allow (create) - Signed in user can create a lead.
     * @deny (create) - Non-signed in user can't create a lead.
     * @allow (update, delete) - Signed in user can update or delete a lead.
     * @deny (update, delete) - Non-signed in user can't update or delete a lead.
     * @principle Public read, authenticated writes.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && exists(resource);
      allow delete: if isSignedIn() && exists(resource);
    }
  }
}