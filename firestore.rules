/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user profiles and a tenant-based model for other data.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the user.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /tenants/{tenantId}/users/{userId}: Stores user-tenant relationships.
 * - /tenants/{tenantId}/courses/{courseId}: Stores course data.
 * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject data.
 * - /tenants/{tenantId}/sessions/{sessionId}: Stores session data.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice data.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment data.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores availability data.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment data.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead data.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read or write their own profile.
 * - Listing of users is generally disallowed except for user-tenant relationships under a tenant.
 * - All tenant-related data requires the user to be authenticated.
 * - Data is segregated by tenantId and userId to avoid cross-tenant or cross-user data access.
 * - The ruleset prioritizes authorization independence by denormalizing tenantId into subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user.
     * @principle Enforces strict document ownership for user profiles.
     */
    match /users/{userId} {
      //function isOwner(userId) {return request.auth != null && request.auth.uid == userId}
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure tenant information.
     * @path /tenants/{tenantId}
     * @allow Anyone can read tenant information. Only authenticated users can create tenants.  Only authenticated users can update or delete tenants.
     * @deny Unauthenticated users cannot create tenants. Different user cannot update tenant
     * @principle Requires authentication for creating, updating, or deleting tenants.
     */
    match /tenants/{tenantId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure user-tenant relationships.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow Authenticated users can create user-tenant relationship, update relationship, delete relationship.
     * @deny Unauthenticated users cannot access.
     * @principle Requires authentication for all operations.
     */
    match /tenants/{tenantId}/users/{userId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure course information within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow Authenticated users can create, read, update, and delete courses within a tenant.
     * @deny Unauthenticated users cannot access course data.
     * @principle Requires authentication for all operations on courses.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure subject information within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow Authenticated users can create, read, update, and delete subjects within a tenant.
     * @deny Unauthenticated users cannot access subject data.
     * @principle Requires authentication for all operations on subjects.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure session information within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow Authenticated users can create, read, update, and delete sessions within a tenant.
     * @deny Unauthenticated users cannot access session data.
     * @principle Requires authentication for all operations on sessions.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure invoice information within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow Authenticated users can create, read, update, and delete invoices within a tenant.
     * @deny Unauthenticated users cannot access invoice data.
     * @principle Requires authentication for all operations on invoices.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure payment information for a specific invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow Authenticated users can create, read, update, and delete payments for an invoice.
     * @deny Unauthenticated users cannot access payment data.
     * @principle Requires authentication for all operations on payments.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure teacher availability information within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow Authenticated users can create, read, update, and delete availabilities within a tenant.
     * @deny Unauthenticated users cannot access availability data.
     * @principle Requires authentication for all operations on availabilities.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure assignment information within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow Authenticated users can create, read, update, and delete assignments within a tenant.
     * @deny Unauthenticated users cannot access assignment data.
     * @principle Requires authentication for all operations on assignments.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Secure lead information within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow Authenticated users can create, read, update, and delete leads within a tenant.
     * @deny Unauthenticated users cannot access lead data.
     * @principle Requires authentication for all operations on leads.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}