/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for private user data and a tenant-based access control model for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the user themselves.
 * - /tenants/{tenantId}: Stores tenant-level data, potentially accessible to tenant admins.
 * - /tenants/{tenantId}/users/{userId}: Stores user data within a tenant context.
 * - /tenants/{tenantId}/courses/{courseId}: Stores course data for a specific tenant.
 * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject data for a specific tenant.
 * - /tenants/{tenantId}/sessions/{sessionId}: Stores session data for a specific tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice data for a specific tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment data for a specific invoice.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores teacher availability data.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment data for courses.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead data for potential students.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Tenant-related data requires tenant membership for access.  The specific role required is not defined in this prototype and should be implemented according to business needs.
 * - The rules avoid using `get()` calls to other documents for authorization by requiring that all relevant data (e.g., `tenantId`, `ownerId`) is present within the document being secured.
 * - The rules are designed to support secure `list` operations by scoping collections to tenants and users.
 *
 * Denormalization for Authorization:
 * - All tenant-related documents (e.g., courses, subjects, sessions) MUST include the `tenantId` field to allow for tenant-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     */
    match /tenants/{tenantId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to user documents within a specific tenant.
     * @path /tenants/{tenantId}/users/{userId}
     */
    match /tenants/{tenantId}/users/{userId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to course documents within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to subject documents within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to session documents within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin/teacher role check
    }

    /**
     * @description Controls access to invoice documents within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to payment documents within a specific invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }

    /**
     * @description Controls access to availability documents within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin/teacher role check
    }

    /**
     * @description Controls access to assignment documents within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin/teacher role check
    }

    /**
     * @description Controls access to lead documents within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow read: if true;
      allow write: if request.auth != null; // TODO: Add tenant admin role check
    }
  }
}