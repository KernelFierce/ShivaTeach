/**
 * @file Firebase Security Rules for Firestore
 * @version 2
 *
 * @description
 * This ruleset enforces a multi-tenant data model with strict ownership and role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Private user profiles, accessible only by the user.
 * - /tenants/{tenantId}: Tenant information, access to be determined.
 * - /tenants/{tenantId}/users/{userId}: Tenant-specific user data, access to be determined.
 * - All other tenant subcollections (courses, subjects, sessions, etc.): Tenant-owned data, access to be determined.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect privacy.
 * - All writes require authentication.
 * - Data validation is minimized to focus on authorization in this prototype phase.
 * - Read operations will follow a restrictive-by-default approach.
 *
 * Denormalization for Authorization:
 * - All tenant-related documents include the `tenantId` field to enable efficient authorization checks without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the authenticated user ID matches the userId in the path.
     *  Example: An authenticated user with UID "user123" can read, update, and delete the document at /users/user123.
     * @deny (get, update, delete) if the authenticated user ID does not match the userId in the path.
     *  Example: An authenticated user with UID "user456" cannot read, update, or delete the document at /users/user123.
     * @allow (create) if the authenticated user ID matches the userId in the path. This allows users to create their own profile.
     *  Example: An authenticated user with UID "user123" can create a new document at /users/user123.
     * @deny (create) if the authenticated user ID does not match the userId in the path.
     *  Example: An authenticated user with UID "user456" cannot create a new document at /users/user123.
     * @principle Enforces document ownership, ensuring users can only manage their own data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant data.
     * @path /tenants/{tenantId}
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add role-based authorization for tenant updates.
      allow delete: if false; // TODO: Add role-based authorization for tenant deletion.
    }

    /**
     * @description Controls access to tenant user data.
     * @path /tenants/{tenantId}/users/{userId}
     */
    match /tenants/{tenantId}/users/{userId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add role-based authorization for tenant user updates.
      allow delete: if false; // TODO: Add role-based authorization for tenant user deletion.
    }

    /**
     * @description Controls access to course data within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to subject data within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to session data within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to invoice data within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to payment data within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to availability data within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to assignment data within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Controls access to lead data within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
      allow delete: if isTenantResourceExisting(tenantId) && request.resource.data.tenantId == tenantId;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isTenantResourceExisting(tenantId) {
      return resource != null && request.resource.data.tenantId == tenantId;
    }
  }
}