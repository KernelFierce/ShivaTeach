/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private user data and a tenant-based access control model for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles. Access is restricted to the authenticated user matching the {userId}.
 * - /tenants/{tenantId}: Stores tenant-level data.  Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/users/{userId}: Stores public tenant user data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/courses/{courseId}: Stores course data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/sessions/{sessionId}: Stores session data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores availability data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment data. Write access is not directly secured but assumed to be managed via backend.
 * - /tenants/{tenantId}/leads/{leadId}: Stores lead data. Write access is not directly secured but assumed to be managed via backend.
 *
 * Key Security Decisions:
 * - User profiles (/users/{userId}) are strictly private; only the authenticated user can read or write their own profile. Listing all users is disallowed.
 * - Tenant-owned data requires validation in backend, so Firestore Rules will only deny public write access
 * - No validation is performed on timestamps or data types beyond authorization-critical fields.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's ID matches the document ID.
     * @deny (get, create, update, delete, list) if the user's ID does not match the document ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as tenant management is handled by backend
     * @principle Tenants are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user documents within a tenant.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as user management is handled by backend
     * @principle Tenant users are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to course documents within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as course management is handled by backend
     * @principle Courses are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to subject documents within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as subject management is handled by backend
     * @principle Subjects are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to session documents within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as session management is handled by backend
     * @principle Sessions are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to invoice documents within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as invoice management is handled by backend
     * @principle Invoices are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to payment documents within a tenant's invoice.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as payment management is handled by backend
     * @principle Payments are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to availability documents within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as availability management is handled by backend
     * @principle Availabilities are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to assignment documents within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as assignment management is handled by backend
     * @principle Assignments are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to lead documents within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) to all authenticated users.
     * @deny (create, update, delete) as lead management is handled by backend
     * @principle Leads are accessible to all authenticated users but only managed in backend
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}