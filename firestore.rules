rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects private user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages tenant information.  Currently, any authenticated user can read tenant information, but only specific roles can modify it.
     * @path /tenants/{tenantId}
     * @allow (get, list) Any authenticated user can read tenant data.
     * @deny (create, update, delete) Non-admin users cannot modify tenant data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user information within a tenant. Access is restricted to the user themselves.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, create, update, delete) User 'user123' in tenant 'tenant1' can access /tenants/tenant1/users/user123.
     * @deny (get, create, update, delete) User 'user456' cannot access /tenants/tenant1/users/user123.
     * @principle Enforces document ownership within the tenant context.
     */
    match /tenants/{tenantId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages courses within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) Any authenticated user can read course data.
     * @deny (create, update, delete) Non-admin users cannot modify course data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages subjects within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) Any authenticated user can read subject data.
     * @deny (create, update, delete) Non-admin users cannot modify subject data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages sessions within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) Any authenticated user can read session data.
     * @deny (create, update, delete) Non-admin users cannot modify session data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages invoices within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) Any authenticated user can read invoice data.
     * @deny (create, update, delete) Non-admin users cannot modify invoice data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages payments for invoices within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) Any authenticated user can read payment data.
     * @deny (create, update, delete) Non-admin users cannot modify payment data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages teacher availability within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) Any authenticated user can read availability data.
     * @deny (create, update, delete) Non-admin users cannot modify availability data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages assignments within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) Any authenticated user can read assignment data.
     * @deny (create, update, delete) Non-admin users cannot modify assignment data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages leads within a tenant. Requires tenant membership for access.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) Any authenticated user can read lead data.
     * @deny (create, update, delete) Non-admin users cannot modify lead data.
     * @principle Requires authentication for all operations; implements tenant-level access control.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      allow get: if isSignedIn();
      allow list: if false; // Disallowing listing for security
      allow create: if isSignedIn(); // Allowing any signed in user to create
      allow update: if false;
      allow delete: if false;
    }
  }
}