/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant data model with user-based access control.
 *
 * Core Philosophy:
 *  - Strict tenant-level isolation is enforced.
 *  - User data is primarily scoped to the individual user, with tenant-level copies for organizational access.
 *  - Data ownership and access are determined by the 'tenantId' and 'userId' fields within documents and paths.
 *  - Authorization independence is achieved through tenantId denormalization on subcollection documents, avoiding costly `get()` calls.
 *
 * Data Structure:
 *  - /tenants/{tenantId}: Stores tenant-specific data. Only tenant admins (if roles were defined) or potentially a dedicated admin role can manage tenants.
 *  - /users/{userId}: Stores private user data, accessible only by the user themselves.
 *  - /tenants/{tenantId}/users/{userId}: Stores tenant-specific user data, accessible to the user and tenant admins (if roles were defined).
 *  - /tenants/{tenantId}/courses/{courseId}: Stores course data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/subjects/{subjectId}: Stores subject data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/sessions/{sessionId}: Stores session data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/availabilities/{availabilityId}: Stores availability data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment data for a tenant. Accessible to users within the tenant.
 *  - /tenants/{tenantId}/leads/{leadId}: Stores lead data for a tenant. Accessible to users within the tenant.
 *
 * Key Security Decisions:
 *  - User listing is generally allowed within a tenant scope but not globally to prevent enumeration.
 *  - All writes require authentication.
 *  - The rules are designed to be as restrictive as possible while enabling the basic application functionality.
 *
 * Denormalization for Authorization:
 *  - All tenant-scoped subcollections include a 'tenantId' field to allow direct rule-based authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages tenant information. Only authenticated users can create tenants.
     * @path /tenants/{tenantId}
     * @allow (create) User with valid auth can create a tenant with the ID matching the tenantId path
     * @deny (create) User tries to create a tenant with a mismatched tenantId.
     * @principle Enforces tenant creation only by authenticated users.
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(tenantId) {
        return request.auth.uid == tenantId;
      }
      function isExistingOwner(tenantId) {
        return isOwner(tenantId) && existsAfter(/databases/$(database)/documents/tenants/$(tenantId));
      }

      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.id == tenantId;
      allow update: if isExistingOwner(tenantId);
      allow delete: if isExistingOwner(tenantId);
    }

    /**
     * @description Manages user information. Only the authenticated user can access their own document.
     * @path /users/{userId}
     * @allow (get, list) User can access their own data.
     * @allow (create) User can create their own user document.
     * @deny (get, list) Another user attempts to access this user's data.
     * @deny (create, update, delete) Another user attempts to modify or delete this user's data.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages user information within a tenant. Only the authenticated user or tenant admins (if defined) can access this data.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list) User can access their own data within the tenant.
     * @allow (create) User can create their own user document within the tenant.
     * @deny (get, list) Another user attempts to access this user's data within the tenant.
     * @deny (create, update, delete) Another user attempts to modify or delete this user's data within the tenant.
     * @principle Restricts access to a user's own data within a tenant context.
     */
    match /tenants/{tenantId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/tenants/$(tenantId)/users/$(userId));
      }

      allow get: if isOwner(userId) && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.id == userId && request.resource.data.tenantId == tenantId;
      allow update: if isExistingOwner(userId) && request.resource.data.tenantId == tenantId;
      allow delete: if isExistingOwner(userId) && request.resource.data.tenantId == tenantId;
    }

    /**
     * @description Manages course information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list) Authenticated user can access course data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete course data.
     * @principle Restricts access to course data within a tenant context.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages subject information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list) Authenticated user can access subject data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete subject data.
     * @principle Restricts access to subject data within a tenant context.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages session information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list) Authenticated user can access session data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete session data.
     * @principle Restricts access to session data within a tenant context.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages invoice information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list) Authenticated user can access invoice data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete invoice data.
     * @principle Restricts access to invoice data within a tenant context.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages payment information within a tenant for a specific invoice. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list) Authenticated user can access payment data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete payment data.
     * @principle Restricts access to payment data within a tenant context.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages teacher availability within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list) Authenticated user can access availability data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete availability data.
     * @principle Restricts access to availability data within a tenant context.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages assignment information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list) Authenticated user can access assignment data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete assignment data.
     * @principle Restricts access to assignment data within a tenant context.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }

    /**
     * @description Manages lead information within a tenant. Only authenticated users within the tenant can access this data.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list) Authenticated user can access lead data within the tenant.
     * @deny (create, update, delete) Unauthenticated user attempts to modify or delete lead data.
     * @principle Restricts access to lead data within a tenant context.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isTenant(tenantId) {
          return get(/databases/$(database)/documents/tenants/$(tenantId)).data.id == tenantId;
      }

      allow get: if isSignedIn() && isTenant(tenantId);
      allow list: if isSignedIn() && isTenant(tenantId);
      allow create: if isSignedIn() && request.resource.data.tenantId == tenantId;
      allow update: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
      allow delete: if isSignedIn() && request.resource.data.tenantId == tenantId && isTenant(tenantId);
    }
  }
}