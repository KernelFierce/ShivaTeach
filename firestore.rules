
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Check if the user is the owner of a document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Check if the user has a specific role in their user profile document
    function hasRole(role) {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Check if the user belongs to the tenant they are trying to access
    function belongsToTenant(tenantId) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.activeTenantId == tenantId;
    }

    // Check if the user is an admin of the tenant they are trying to access
    function isTenantAdmin(tenantId) {
        return belongsToTenant(tenantId) && (hasRole('OrganizationAdmin') || hasRole('Admin'));
    }

    // Private user profiles. Only the owner can access their own document.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Disallow listing all user profiles for security
      allow list: if false;
    }

    // Tenant-level data. This is a generic rule for all tenant sub-collections.
    // It allows any authenticated user who belongs to that tenant to read data.
    // It restricts write access to admins of that tenant.
    match /tenants/{tenantId}/{collection}/{docId} {
      allow read: if belongsToTenant(tenantId);
      allow write: if isTenantAdmin(tenantId); // create, update, delete
    }

     // Tenant documents themselves. For now, read-only for members, writeable by super-admins.
    match /tenants/{tenantId} {
        allow read: if belongsToTenant(tenantId);
        allow write: if hasRole('SuperAdmin');
    }
  }
}
