/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for private user data and tenant-based access control for shared resources.
 *
 * Data Structure:
 * - /users/{userId}: Private user profiles, accessible only to the owning user.
 * - /tenants/{tenantId}: Tenant-level data, potentially accessible to organization admins.
 * - /tenants/{tenantId}/users/{userId}: Public user profiles within a tenant.
 * - /tenants/{tenantId}/courses/{courseId}: Course information for a tenant.
 * - /tenants/{tenantId}/subjects/{subjectId}: Subject information for a tenant.
 * - /tenants/{tenantId}/sessions/{sessionId}: Session information for a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}: Invoice information for a tenant.
 * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Payment information for a specific invoice.
 * - /tenants/{tenantId}/availabilities/{availabilityId}: Teacher availability slots.
 * - /tenants/{tenantId}/assignments/{assignmentId}: Assignment information.
 * - /tenants/{tenantId}/leads/{leadId}: Lead information.
 *
 * Key Security Decisions:
 * - User data under `/users/{userId}` is strictly private and accessible only to the authenticated user with a matching UID.
 * - Listing of users is disallowed, except for listing of /tenants/{tenantId}/users/{userId}, which is accessible to organization admins.
 * - Tenant-specific data requires the request to be authenticated. Write access to tenant-specific data is restricted to tenant admins, based on information denormalized onto the documents themselves.
 *
 * Denormalization for Authorization:
 * - Tenant-owned data includes a `tenantId` field to avoid `get()` calls in rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access only to the user who owns the profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User with matching {userId} can access.
     * @deny (get, create, update, delete): User with non-matching {userId} cannot access.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // isSignedIn() : request.auth != null
      function isSignedIn() {
        return request.auth != null;
      }

      // isOwner(userId) : request.auth.uid == userId
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // isExistingOwner(userId) : isOwner(userId) && resource != null
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Tenant documents. In the prototyping phase, all authenticated users can read, but only tenant admins can write.
     * @path /tenants/{tenantId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant access control based on tenantId
     */
    match /tenants/{tenantId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to TenantUser documents. All authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific user access control.
     */
    match /tenants/{tenantId}/users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Course documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific course access control.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Subject documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific subject access control.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Session documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific session access control.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Invoice documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific invoice access control.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Controls access to Payment documents. In the prototyping phase, all authenticated users can read, but write access is limited.
      * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
      * @allow get, list: if isSignedIn()
      * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
      * @principle: Tenant-specific payment access control.
      */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Availability documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific availability access control.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Assignment documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific assignment access control.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to Lead documents. In the prototyping phase, all authenticated users can read, but write access is limited.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow get, list: if isSignedIn()
     * @allow create, update, delete: if false; // TODO: Add tenant admin check once roles are defined.
     * @principle: Tenant-specific lead access control.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}