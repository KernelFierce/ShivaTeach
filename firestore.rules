/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a multi-tenant security model with role-based access control.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profiles, accessible only to the user.  Includes roles for global permissions.
 * - /tenants/{tenantId}: Stores tenant-specific data (e.g., name, billing). Access controlled by roles within the tenant.
 * - /tenants/{tenantId}/users/{userId}: Stores user profiles specific to a tenant.
 * - Other collections under /tenants/{tenantId}: Courses, Subjects, Sessions, Invoices, Payments, Availabilities, Assignments, Leads. Tenant-level access.
 *
 * Key Security Decisions:
 * - Strict User Ownership: User profiles (/users/{userId}) are accessible only by the authenticated user.
 * - Tenant Isolation: Data within each tenant is isolated from other tenants.
 * - Role-Based Access Control: User roles (both global and within a tenant) determine access to specific resources.  Global roles are stored in the user profile (/users/{userId}). Tenant-specific roles are stored in /tenants/{tenantId}/users/{userId}.
 * - Denormalization: The `tenantId` is included in documents within tenant subcollections to avoid costly `get()` calls in security rules.
 * - No Public Listing: Listing of users is not allowed by default.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete): User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to tenant data.  Tenant data can only be read by authenticated users.
     * @path /tenants/{tenantId}
     * @allow (get, list): Any authenticated user can read tenant data.
     * @allow (create, update, delete): Only organization admins can manage tenants.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete tenants.
     * @principle Restricts tenant management to authorized roles.
     */
    match /tenants/{tenantId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO:  Implement RBAC for OrganizationAdmin/SuperAdmin to manage tenants.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to tenant user data.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow (get, list): Authenticated users can read tenant user data.
     * @allow (create, update, delete): Only tenant admins can manage tenant users.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete tenant users.
     * @principle Restricts tenant user management to authorized roles.
     */
    match /tenants/{tenantId}/users/{userId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to course data within a tenant.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow (get, list): Authenticated users can read course data within a tenant.
     * @allow (create, update, delete): Only tenant admins can manage courses.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete courses.
     * @principle Restricts course management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/courses/{courseId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to subject data within a tenant.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow (get, list): Authenticated users can read subject data within a tenant.
     * @allow (create, update, delete): Only tenant admins can manage subjects.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete subjects.
     * @principle Restricts subject management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to session data within a tenant.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow (get, list): Authenticated users can read session data within a tenant.
     * @allow (create, update, delete): Only tenant admins or teachers can manage sessions.
     * @deny (create, update, delete): Non-admins and non-teachers cannot create, update, or delete sessions.
     * @principle Restricts session management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins/Teachers.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to invoice data within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow (get, list): Authenticated users can read invoice data within a tenant.
     * @allow (create, update, delete): Only tenant admins can manage invoices.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete invoices.
     * @principle Restricts invoice management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to payment data within a tenant.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow (get, list): Authenticated users can read payment data within a tenant.
     * @allow (create, update, delete): Only tenant admins can manage payments.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete payments.
     * @principle Restricts payment management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to availability data within a tenant.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow (get, list): Authenticated users can read availability data within a tenant.
     * @allow (create, update, delete): Only tenant admins or teachers can manage availabilities.
     * @deny (create, update, delete): Non-admins and non-teachers cannot create, update, or delete availabilities.
     * @principle Restricts availability management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins/Teachers.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to assignment data within a tenant.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow (get, list): Authenticated users can read assignment data within a tenant.
     * @allow (create, update, delete): Only tenant admins or teachers can manage assignments.
     * @deny (create, update, delete): Non-admins and non-teachers cannot create, update, or delete assignments.
     * @principle Restricts assignment management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false; // TODO: Implement RBAC for TenantAdmins/Teachers.  Requires denormalized admin list or role check.
    }

    /**
     * @description Secure access to lead data within a tenant.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow (get, list): Authenticated users can read lead data within a tenant.
     * @allow (create, update, delete): Only tenant admins can manage leads.
     * @deny (create, update, delete): Non-admins cannot create, update, or delete leads.
     * @principle Restricts lead management to authorized roles within the tenant.
     */
    match /tenants/{tenantId}/leads/{leadId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if isSignedIn();
        allow create, update, delete: if false;  // TODO: Implement RBAC for TenantAdmins.  Requires denormalized admin list or role check.
    }
  }
}