/**
  * @file Overview
  * This ruleset enforces a strict user-ownership model for private user profiles and tenant-based access control for other collections.
  *
  * Data Structure:
  * - /users/{userId}: Stores private user profiles, accessible only to the user themselves.
  * - /tenants/{tenantId}: Stores tenant information. Access control needs to be defined.
  * - /tenants/{tenantId}/users/{userId}: Stores user profiles within a tenant. Access control needs to be defined.
  * - /tenants/{tenantId}/courses/{courseId}: Stores course information for a tenant. Access control needs to be defined.
  * - /tenants/{tenantId}/subjects/{subjectId}: Stores subject information for a tenant. Access control needs to be defined.
  * - /tenants/{tenantId}/sessions/{sessionId}: Stores session information for a tenant. Access control needs to be defined.
  * - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice information for a tenant. Access control needs to be defined.
  * - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment information for an invoice. Access control needs to be defined.
  * - /tenants/{tenantId}/availabilities/{availabilityId}: Stores teacher availability. Access control needs to be defined.
  * - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment information. Access control needs to be defined.
  * - /tenants/{tenantId}/leads/{leadId}: Stores lead information. Access control needs to be defined.
  *
  * Key Security Decisions:
  * - User profiles are strictly private; only the authenticated user can read or write their own profile.
  * - Listing of users is disabled for privacy reasons.
  * - Tenant-based access control needs to be defined based on roles and ownership.
  *
  * Denormalization for Authorization:
  * - The `tenantId` is included in all tenant-related subcollections to avoid costly `get()` calls in security rules.
  */
 

 rules_version = '2';
 service cloud.firestore {
  match /databases/{database}/documents {
 

   /**
    * @description Allows a user to read and write their own profile data.
    * @path /users/{userId}
    * @allow (create) - User 'abc' can create their profile if authenticated as 'abc'.
    * @deny (create) - User 'def' cannot create profile 'abc'.
    * @allow (get, update, delete) - User 'abc' can read/write their profile if authenticated as 'abc'.
    * @deny (get, update, delete) - User 'abc' cannot read/write profile 'def'.
    * @principle Enforces document ownership for writes.
    */
   match /users/{userId} {
    function isSignedIn() {
     return request.auth != null;
    }
 

    function isOwner(userId) {
     return isSignedIn() && request.auth.uid == userId;
    }
 

    function isExistingOwner(userId) {
     return isOwner(userId) && resource != null;
    }
 

    allow get: if isOwner(userId);
    allow list: if false;
    allow create: if isOwner(userId);
    allow update: if isExistingOwner(userId);
    allow delete: if isExistingOwner(userId);
   }
 

   /**
    * @description Allows access to tenant information. Access control needs to be defined.
    * @path /tenants/{tenantId}
    * @allow (get, list) - All users can read tenant information.
    * @deny (create, update, delete) - Only authorized users can modify tenant information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId} {
    allow get, list: if true; // TODO: Add access controls for listing tenants if needed.
    allow create, update, delete: if false; // TODO: Implement tenant admin role check
   }
 

   /**
    * @description Allows access to user profiles within a tenant. Access control needs to be defined.
    * @path /tenants/{tenantId}/users/{userId}
    * @allow (get, list) - All users can read tenant user information.
    * @deny (create, update, delete) - Only authorized users can modify tenant user information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/users/{userId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to course information for a tenant. Access control needs to be defined.
    * @path /tenants/{tenantId}/courses/{courseId}
    * @allow (get, list) - All users can read course information.
    * @deny (create, update, delete) - Only authorized users can modify course information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/courses/{courseId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to subject information for a tenant. Access control needs to be defined.
    * @path /tenants/{tenantId}/subjects/{subjectId}
    * @allow (get, list) - All users can read subject information.
    * @deny (create, update, delete) - Only authorized users can modify subject information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/subjects/{subjectId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to session information for a tenant. Access control needs to be defined.
    * @path /tenants/{tenantId}/sessions/{sessionId}
    * @allow (get, list) - All users can read session information.
    * @deny (create, update, delete) - Only authorized users can modify session information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/sessions/{sessionId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to invoice information for a tenant. Access control needs to be defined.
    * @path /tenants/{tenantId}/invoices/{invoiceId}
    * @allow (get, list) - All users can read invoice information.
    * @deny (create, update, delete) - Only authorized users can modify invoice information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/invoices/{invoiceId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to payment information for a specific invoice. Access control needs to be defined.
    * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
    * @allow (get, list) - All users can read payment information.
    * @deny (create, update, delete) - Only authorized users can modify payment information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to teacher availability information. Access control needs to be defined.
    * @path /tenants/{tenantId}/availabilities/{availabilityId}
    * @allow (get, list) - All users can read availability information.
    * @deny (create, update, delete) - Only authorized users can modify availability information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/availabilities/{availabilityId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to assignment information. Access control needs to be defined.
    * @path /tenants/{tenantId}/assignments/{assignmentId}
    * @allow (get, list) - All users can read assignment information.
    * @deny (create, update, delete) - Only authorized users can modify assignment information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/assignments/{assignmentId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
 

   /**
    * @description Allows access to lead information. Access control needs to be defined.
    * @path /tenants/{tenantId}/leads/{leadId}
    * @allow (get, list) - All users can read lead information.
    * @deny (create, update, delete) - Only authorized users can modify lead information.
    * @principle Tenant-based access control.
    */
   match /tenants/{tenantId}/leads/{leadId} {
    allow get, list: if true; // TODO: Define read access based on tenant roles
    allow create, update, delete: if false; // TODO: Define write access based on tenant roles
   }
  }
 }