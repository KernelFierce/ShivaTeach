/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for private user data and a tenant-based access control model for shared resources. It leverages denormalization to optimize security rule performance and maintainability.
 * @data-structure
 *  - /users/{userId}: Stores private user profiles. Access is restricted to the owner.
 *  - /tenants/{tenantId}: Stores tenant information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/users/{userId}: Stores tenant user information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/courses/{courseId}: Stores course information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/subjects/{subjectId}: Stores subject information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/sessions/{sessionId}: Stores session information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/invoices/{invoiceId}: Stores invoice information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}: Stores payment information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/availabilities/{availabilityId}: Stores availability information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/assignments/{assignmentId}: Stores assignment information. Access control not explicitly defined.
 *  - /tenants/{tenantId}/leads/{leadId}: Stores lead information. Access control not explicitly defined.
 * @key-security-decisions
 *  - User profiles (/users/{userId}) are strictly private and accessible only to the authenticated user with a matching UID.
 *  - Listing of user profiles is denied to prevent information leakage.
 *  - Tenant-owned data requires further access control definition based on roles and relationships. Currently, writes are denied.
 * @denormalization-for-authorization tenantId is denormalized into subcollections under /tenants/{tenantId} to avoid costly get() calls in rules.
 * @structural-segregation Private user data is segregated under /users/{userId}, ensuring clear separation from tenant-owned data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get) - An authenticated user with UID 'user_abc' can create/update/get their own profile at /users/user_abc.
     * @deny (create, update, get) - An authenticated user with UID 'user_xyz' cannot access the profile at /users/user_abc.
     * @deny list - No one can list user profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && request.auth.uid == userId;
      allow delete: if isOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Controls access to tenant data.  Currently, only reads are allowed.
     * @path /tenants/{tenantId}
     * @allow get, list - Any user can read tenant data.
     * @deny create, update, delete - No one can create, update, or delete tenant data without further access control implementation.
     * @principle  Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for tenant management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user data within a tenant.  Currently, all writes are denied.
     * @path /tenants/{tenantId}/users/{userId}
     * @allow get, list - Any user can read tenant user data.
     * @deny create, update, delete - No one can create, update, or delete tenant user data without further access control implementation.
     * @principle  Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/users/{userId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for tenant user management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to course data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/courses/{courseId}
     * @allow get, list - Any user can read course data.
     * @deny create, update, delete - No one can create, update, or delete course data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/courses/{courseId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for course management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to subject data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/subjects/{subjectId}
     * @allow get, list - Any user can read subject data.
     * @deny create, update, delete - No one can create, update, or delete subject data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/subjects/{subjectId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for subject management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to session data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/sessions/{sessionId}
     * @allow get, list - Any user can read session data.
     * @deny create, update, delete - No one can create, update, or delete session data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/sessions/{sessionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for session management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to invoice data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/invoices/{invoiceId}
     * @allow get, list - Any user can read invoice data.
     * @deny create, update, delete - No one can create, update, or delete invoice data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/invoices/{invoiceId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for invoice management.
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Controls access to payment data within a tenant invoice. Currently, all writes are denied.
     * @path /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId}
     * @allow get, list - Any user can read payment data.
     * @deny create, update, delete - No one can create, update, or delete payment data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/invoices/{invoiceId}/payments/{paymentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for payment management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to availability data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/availabilities/{availabilityId}
     * @allow get, list - Any user can read availability data.
     * @deny create, update, delete - No one can create, update, or delete availability data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/availabilities/{availabilityId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for availability management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to assignment data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/assignments/{assignmentId}
     * @allow get, list - Any user can read assignment data.
     * @deny create, update, delete - No one can create, update, or delete assignment data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/assignments/{assignmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for assignment management.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to lead data within a tenant. Currently, all writes are denied.
     * @path /tenants/{tenantId}/leads/{leadId}
     * @allow get, list - Any user can read lead data.
     * @deny create, update, delete - No one can create, update, or delete lead data without further access control implementation.
     * @principle Requires additional role-based access control for write operations.
     */
    match /tenants/{tenantId}/leads/{leadId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add role-based access control for lead management.
      allow update: if false;
      allow delete: if false;
    }
  }
}